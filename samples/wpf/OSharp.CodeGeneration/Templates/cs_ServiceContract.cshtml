@inherits MiniRazor.TemplateBase<CodeModule>
@namespace OSharp.CodeGeneration.Templates
@using System;
@using OSharp.CodeGeneration.Services.Entities
@using OSharp.CodeGeneration.Utils
@using OSharp.Collections;
@using OSharp.Exceptions;
@using OSharp.Extensions;
@{
    CodeModule module = Model;
}// -----------------------------------------------------------------------
// <auto-generated>
//    此代码由代码生成器生成。
//    手动更改此文件可能导致应用程序出现意外的行为。
//    如果重新生成代码，对此文件的任何修改都会丢失。
//    如果需要扩展此类，可以遵守如下规则进行扩展：
//      1. 横向扩展：如需给当前模块添加方法接口，可新建文件“I@(module.Name)Contract.cs”的分部接口“public partial interface I@(module.Name)Contract”添加方法，并添加相应新的分部基类 abstract partial class @(module.Name)ServiceBase 实现新方法
// </auto-generated>
//
// <copyright file="I@(module.Name)Contract.generated.cs" company="@module.Project.Company">
//    @module.Project.Copyright
// </copyright>
// <site>@module.Project.SiteUrl</site>
// <last-editor>@module.Project.Creator</last-editor>
// -----------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

using OSharp.Data;
using OSharp.Extensions;

using @(module.Namespace).Dtos;
using @(module.Namespace).Entities;


namespace @(module.Namespace)
{
    /// <summary>
    /// 业务契约接口：@(module.Display)模块
    /// </summary>
    public partial interface I@(module.Name)Contract
    {
@foreach (CodeEntity entity in module.Entities)
{
    string keyType = TypeHelper.ToSingleTypeName(entity.PrimaryKeyTypeFullName);
<text>        #region @(entity.Display)信息业务

        /// &lt;summary&gt;
        /// 获取 @(entity.Display)信息查询数据集
        /// &lt;/summary&gt;
        IQueryable&lt;@(entity.Name)&gt; @(entity.Name.ToPlural()) { get; }

        /// &lt;summary&gt;
        /// 检查@(entity.Display)信息信息是否存在
        /// &lt;/summary&gt;
        /// &lt;param name="predicate"&gt;检查谓语表达式&lt;/param&gt;
        /// &lt;param name="id"&gt;更新的@(entity.Display)信息编号&lt;/param&gt;
        /// &lt;returns&gt;@(entity.Display)信息是否存在&lt;/returns&gt;
        Task&lt;bool&gt; Check@(entity.Name)Exists(Expression&lt;Func&lt;@(entity.Name), bool&gt;&gt; predicate, @keyType id = default(@(keyType)));
    @if (entity.Addable) {
        <text>
        /// &lt;summary&gt;
        /// 添加@(entity.Display)信息信息
        /// &lt;/summary&gt;
        /// &lt;param name="dtos"&gt;要添加的@(entity.Display)信息DTO信息&lt;/param&gt;
        /// &lt;returns&gt;业务操作结果&lt;/returns&gt;
        Task&lt;OperationResult&gt; Create@(entity.Name.ToPlural())(params @(entity.Name)InputDto[] dtos);
</text>
    }
    @if (entity.Updatable)
    {
        <text>
        /// &lt;summary&gt;
        /// 更新@(entity.Display)信息信息
        /// &lt;/summary&gt;
        /// &lt;param name="dtos"&gt;包含更新信息的@(entity.Display)信息DTO信息&lt;/param&gt;
        /// &lt;returns&gt;业务操作结果&lt;/returns&gt;
        Task&lt;OperationResult&gt; Update@(entity.Name.ToPlural())(params @(entity.Name)InputDto[] dtos);
</text>
    }
    @if (entity.Deletable)
    {
        <text>
        /// &lt;summary&gt;
        /// 删除@(entity.Display)信息信息
        /// &lt;/summary&gt;
        /// &lt;param name="ids"&gt;要删除的@(entity.Display)信息编号&lt;/param&gt;
        /// &lt;returns&gt;业务操作结果&lt;/returns&gt;
        Task&lt;OperationResult&gt; Delete@(entity.Name.ToPlural())(params @(keyType)[] ids);
</text>
    }

        #endregion

</text>
}
    }
}
