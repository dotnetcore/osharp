@inherits MiniRazor.TemplateBase<CodeModule>
@namespace OSharp.CodeGeneration.Templates
@using System;
@using OSharp.CodeGeneration.Services.Entities
@using OSharp.CodeGeneration.Utils
@using OSharp.Collections;
@using OSharp.Exceptions;
@using OSharp.Extensions;
@{
    CodeModule module = Model;
}// -----------------------------------------------------------------------
// <auto-generated>
//    此代码由代码生成器生成。
//    手动更改此文件可能导致应用程序出现意外的行为。
//    如果重新生成代码，对此文件的任何修改都会丢失。
//    如果需要扩展此类，请在控制器类型 @(module.Name)Service 进行继承重写
// </auto-generated>
//
// <copyright file="@(module.Name)ServiceBase.generated.cs" company="@module.Project.Company">
//    @module.Project.Copyright
// </copyright>
// <site>@module.Project.SiteUrl</site>
// <last-editor>@module.Project.Creator</last-editor>
// -----------------------------------------------------------------------

using System;
using System.Linq;
using System.Threading.Tasks;

using OSharp.Core.Systems;
using OSharp.Data;
using OSharp.Entity;
using OSharp.EventBuses;
using OSharp.Extensions;
using OSharp.Identity;

using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

using @(module.Namespace).Dtos;
using @(module.Namespace).Entities;


namespace @(module.Namespace)
{
    /// &lt;summary&gt;
    /// 业务实现基类：@(module.Display)模块
    /// &lt;/summary&gt;
    public abstract partial class @(module.Name)ServiceBase : I@(module.Name)Contract
    {
        /// &lt;summary&gt;
        /// 初始化一个&lt;see cref="@(module.Name)Service"/&gt;类型的新实例
        /// &lt;/summary&gt;
        protected @(module.Name)ServiceBase(IServiceProvider provider)
        {
            ServiceProvider = provider;
            Logger = provider.GetLogger(GetType());
        }
    
        #region 属性

        /// <summary>
        /// 获取 服务提供者对象
        /// </summary>
        protected IServiceProvider ServiceProvider { get; }

        /// <summary>
        /// 获取 日志对象
        /// </summary>
        protected ILogger Logger { get; }

@foreach (CodeEntity entity in module.Entities)
{
    string keyType = TypeHelper.ToSingleTypeName(entity.PrimaryKeyTypeFullName);
<text>        /// &lt;summary&gt;
        /// 获取 @(entity.Display)信息仓储对象
        /// &lt;/summary&gt;
        protected IRepository&lt;@(entity.Name), @(keyType)&gt; @(entity.Name)Repository => ServiceProvider.GetRequiredService&lt;IRepository&lt;@(entity.Name), @(keyType)&gt;&gt;();

</text>
}
        /// &lt;summary&gt;
        /// 获取 事件总线
        /// &lt;/summary&gt;
        protected IEventBus EventBus => ServiceProvider.GetService&lt;IEventBus&gt;();

        /// &lt;summary&gt;
        /// 获取 设置存储对象
        /// &lt;/summary&gt;
        protected IKeyValueStore KeyValueStore => ServiceProvider.GetService&lt;IKeyValueStore&gt;();

        #endregion
    }
}
